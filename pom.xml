<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- 1) Maven's project model version -->
    <modelVersion>4.0.0</modelVersion>

    <!-- 2) Inherit from the Spring Boot parent (manages many plugin versions, etc.) -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!-- 3) Basic project identifiers -->
    <groupId>com.opencourse</groupId>
    <artifactId>CG-Courses-CRM</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>CG-Courses-CRM</name>
    <description>CG-Courses-CRM</description>

    <!-- The resulting artifact (JAR) -->
    <packaging>jar</packaging>

    <!-- 4) Optional metadata (URL, License, SCM info, etc.) -->
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>

    <!-- 5) Central Maven properties for version management -->
    <properties>
        <!-- Java 23 release (experimental) -->
        <java.version>23</java.version>

        <!-- Version placeholders -->
        <openapi-generator-maven-plugin.version>7.10.0</openapi-generator-maven-plugin.version>
        <springdoc-openapi.version>1.8.0</springdoc-openapi.version>
        <jackson-databind-nullable.version>0.2.6</jackson-databind-nullable.version>
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
        <mapstruct.version>1.6.3</mapstruct.version>
        <liquibase-core.version>4.31.0</liquibase-core.version>
        <postgresql.version>42.7.5</postgresql.version>
        <springdoc-openapi-starter-webmvc-ui.version>2.8.5</springdoc-openapi-starter-webmvc-ui.version>
    </properties>

    <!-- 6) Dependencies for Spring Boot web, validation, testing, OpenAPI tooling etc -->

    <dependencies>
        <!-- Spring Boot web starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Validation starter (Hibernate Validator), needed by generated code with validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Spring Boot test starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- OpenAPI Generator plugin (scope=provided so it's not in final JAR) -->
        <!--suppress VulnerableLibrariesLocal -->
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>openapi-generator-maven-plugin</artifactId>
            <version>${openapi-generator-maven-plugin.version}</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-simple</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Nullable support for OpenAPI-generated classes -->
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>${jackson-databind-nullable.version}</version>
        </dependency>

        <!-- Mapstruct -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>

        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${mapstruct.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Liquibase migrations -->
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
            <version>${liquibase-core.version}</version>
        </dependency>

        <!-- Database -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc-openapi-starter-webmvc-ui.version}</version>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.12.6</version>
        </dependency>

    </dependencies>

    <!-- 7) Build configuration -->
    <build>
        <!--
            pluginManagement: where we define or override plugin versions/settings.
            Only takes effect if the plugin is referenced in <plugins>.
        -->
        <pluginManagement>
            <plugins>
                <!-- Maven Compiler Plugin for Java 23 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <!-- Tells Maven to use release 23 for Java compilation. -->
                        <release>23</release>
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.mapstruct</groupId>
                                <artifactId>mapstruct-processor</artifactId>
                                <version>${mapstruct.version}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>

                <!-- OpenAPI Generator Plugin version reference -->
                <plugin>
                    <groupId>org.openapitools</groupId>
                    <artifactId>openapi-generator-maven-plugin</artifactId>
                    <version>${openapi-generator-maven-plugin.version}</version>
                </plugin>

                <!-- Spotless plugin to apply autoformatting -->
                <plugin>
                    <groupId>com.diffplug.spotless</groupId>
                    <artifactId>spotless-maven-plugin</artifactId>
                    <version>${spotless-maven-plugin.version}</version>
                    <configuration>
                        <java>
                            <googleJavaFormat/>
                        </java>
                    </configuration>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>
            <!--
                Spring Boot Maven Plugin: packages the final jar,
                includes a main class in the manifest, etc.
            -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!--
                OpenAPI Generator Plugin: auto-generates Spring code from api.yml
                BEFORE the compile phase (so it compiles along with other code).
            -->
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- Unique ID for this execution -->
                        <id>generate-openapi</id>
                        <!--
                            Binding generation to the 'generate-sources' phase
                            ensures code is created before compile.
                        -->
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <!--
                                The generator produces Spring Boot stubs/classes
                                based on your OpenAPI spec.
                            -->
                            <generatorName>spring</generatorName>
                            <library>spring-boot</library>

                            <!-- Points to the OpenAPI YAML spec -->
                            <inputSpec>${project.basedir}/src/main/resources/api.yml</inputSpec>

                            <!-- Optional suffix (e.g., 'PersonDto' instead of 'Person') -->
                            <modelNameSuffix>Dto</modelNameSuffix>

                            <!--
                                Target packages for the generated interfaces (api)
                                and DTOs/models (model).
                            -->
                            <apiPackage>opencourse.crm.controller.controller.generated.api</apiPackage>
                            <modelPackage>opencourse.crm.controller.controller.generated.dto</modelPackage>

                            <!--
                                Mappings so that 'DateTime' in spec -> Instant in code, etc.
                            -->
                            <importMappings>
                                <importMapping>Instant=java.time.Instant</importMapping>
                                <importMapping>Date=java.util.Date</importMapping>
                            </importMappings>
                            <typeMappings>
                                <typeMapping>DateTime=Instant</typeMapping>
                                <typeMapping>Date=Date</typeMapping>
                            </typeMappings>

                            <!--
                                configOptions: fine-tune how code is generated,
                                especially regarding validation, annotation usage, etc.
                            -->
                            <configOptions>
                                <!-- Tells the generator to accept your custom date/time mappings -->
                                <dateLibrary>custom</dateLibrary>
                                <!-- 'false' means controllers won't delegate to separate classes -->
                                <delegatePattern>false</delegatePattern>
                                <!-- No extra documentation annotations in generated code -->
                                <documentationProvider>none</documentationProvider>
                                <!-- Generate only interfaces, letting you implement them yourself -->
                                <interfaceOnly>true</interfaceOnly>
                                <!-- Use updated (non-legacy) discriminator logic for polymorphism -->
                                <legacyDiscriminatorBehavior>false</legacyDiscriminatorBehavior>
                                <!-- Adjust for Spring Boot 3 (Jakarta-based) specifics -->
                                <useSpringBoot3>true</useSpringBoot3>
                                <!-- Add bean validation annotations to generated code -->
                                <performBeanValidation>true</performBeanValidation>
                                <useBeanValidation>true</useBeanValidation>
                                <!-- Group operations by 'tags' in the OpenAPI spec, if present -->
                                <useTags>true</useTags>
                            </configOptions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>